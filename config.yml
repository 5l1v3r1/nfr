#
# This is the Network Flight Recorder (NFR) configuration file. Here you define
# the location of the AlphaSOC Analytics Engine ("engine" section), the source of
# network for NFR is to score (by sniffing a network interface or monitoring log
# files on disk, as set in the "inputs" section), and where to send the alerts
# generated by the Analytics Engine (set in the "outputs" section).
#
# Please contact support@alphasoc.com if you have any questions
#

################################################################################
# The engine section describes the location of the Analytics Engine, your
# AlphaSOC API key, and the polling interval to retrieve alerts.
################################################################################

engine:

  # Location of the AlphaSOC Analytics Engine
  # This is a URI and defaults to the AlphaSOC cloud. Please contact
  # support@alphasoc.com to discuss on-premise operation and VM setup.
  # Default: https://api.alphasoc.net
  host: https://api.alphasoc.net

  # Your AlphaSOC API key (required to use the service)
  # Use "nfr account register" to generate one
  api_key: test-api-key

  # Use the following section to enable or disable analysis modules
  analyze:
    # Enable (true) or disable (false) DNS event processing
    # Default: true
    dns: true
    # Enable (true) or disable (false) IP event processing
    # Default: true
    ip: true

  alerts:
    # Interval for polling the Analytics Engine for new alerts
    # Default: 5m
    poll_interval: 5m

################################################################################
# The inputs section describes where NFR collects network traffic to score
# from (e.g. a network interface to sniff, or a log file to read)
################################################################################

inputs:

  # Capture live traffic via network sniffing
  sniffer:
    # Define whether NFR should sniff network data or not
    # Default: true
    enabled: true
    # Interface to listen for network traffic on (e.g. eth0)
    # If none is defined, the first non-loopback interface will be used by NFR
    # Default: (none)
    interface:

  # Define log files containing network events to monitor
  # Files are only monitored if NFR is run with the "monitor" command. You
  # can monitor multiple files here (e.g. Bro IDS dns.log and conn.log files)
  # Default: []
  monitor:
    # Format of the file (possible values are: bro, suricata, msdns)
    # Default: (none)
    - format:
      # Type of events in the file (possible values are: dns, ip)
      # Default: (none)
      type:
      # File on disk which NFR should monitor
      # Default: (none)
      file:

  # Time format used for parsing MSDNS log files.
  # Format layout documented at https://golang.org/pkg/time/#Parse
  #msdns_time_format: "1/02/2006 3:04:05 PM"

  # Use inotify for detecting changes in files. If false, regular file polling
  # will be used. Default: false for Windows, true otherwise.
  #use_inotify: true

################################################################################
# The outputs section describes where NFR should send the alerts generated by
# the Analytics Engine (e.g. Graylog, a local file, or terminal)
################################################################################

outputs:
  # Define whether NFR should gather alerts to send elsewhere. You can use this
  # toggle to disable escalation of alerts and run NFR in input-only mode, by
  # which it submits network events to the Analytics Engine for scoring. This
  # allows you to run multiple sensors and elect a single NFR instance to
  # collect alerts and send them elsewhere.
  # Default: true
  enabled: true

  # Syslog server where AlphaSOC alerts will be sent in JSON format.
  # NFR will use TCP port 514 to send JSON messages via syslog by default.
  # Use the fields below to define the syslog server IP address and port.
  syslog:
    # IP address of the syslog server
    # Default: (none)
    ip:
    # Port for the syslog TCP input
    # Default: 514
    port: 514
    # Connection protocol.
    # Default: tcp
    proto: tcp
    # Log format (can be json or cef)
    # Default: json
    format: json

  # Graylog server URI where AlphaSOC alerts will be sent in GELF format
  # The AlphaSOC Network Behavior Analytics for Graylog content pack establishes
  # an input on TCP port 12201, which can be used to plug-and-play here.
  graylog:
    # URI to the server (for example tcp://127.0.0.1:12201)
    # Default: (none)
    uri:
    # Message level.
    # Default: 1
    level: 1

  # Location to which alerts should be written. This can be a file, or a special
  # ouput (stderr or stdout) to print events to the terminal.
  # Default: stderr
  file: stderr

  # File output format (can be json or cef)
  # Default: json
  format: json

################################################################################
# Monitoring scope file location
################################################################################

scope:

   # Monitoring scope file to load
   # Default: (none)
  file:

################################################################################
# NFR logging configuration
################################################################################

log:

  # File to which NFR should log
  # To print log to console use two special outputs: stderr or stdout
  # Default: stdout
  file: stdout

  # Logging level. Possibles values are: debug, info, warn, error
  # Default: info
  level: info

################################################################################
# Internal NFR data location
################################################################################

data:

  # Define the file for internal data and caching
  # Default:
  #  - linux: /run/nfr.data
  #  - windows: %AppData%/nfr.data
  file: /run/nfr.data

################################################################################
# DNS data processing and queueing configuration
################################################################################

dns_events:

  # NFR buffer size for the DNS event queue
  # Default: 65535
  buffer_size: 65535

  # Interval for flushing data to Analytics Engine for scoring
  # Default: 30s
  flush_interval: 30s

  # If NFR is unable to send DNS events to the Analytics Engine, it can
  # write the events to disk (in PCAP format) and attempt to send them again
  failed:
    # File in which to store unprocessed DNS events on disk
    # Default: (none)
    file:

################################################################################
# IP data processing and queueing configuration
################################################################################

ip_events:

  # NFR buffer size for the IP event queue
  # Default: 65535
  buffer_size: 65535

  # Interval for flushing data to Analytics Engine for scoring
  # Default: 30s
  flush_interval: 30s

  # If NFR is unable to send IP events to the Analytics Engine, it can
  # write the events to disk (in PCAP format) and attempt to send them again
  failed:
    # File in which to store unprocessed IP events on disk
    # Default: (none)
    file:
